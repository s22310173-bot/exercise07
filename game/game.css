using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace SnakeWinForms
{
    internal static class Program
    {
        [STAThread]
        private static void Main()
        {
            // For .NET 6+ WinForms template
            try { ApplicationConfiguration.Initialize(); } catch { Application.EnableVisualStyles(); Application.SetCompatibleTextRenderingDefault(false); }
            Application.Run(new GameForm());
        }
    }

    public class GameForm : Form
    {
        private readonly Timer timer;
        private readonly int cellSize = 20;
        private readonly int cols = 30;
        private readonly int rows = 20;

        private readonly List<Point> snake = new List<Point>();
        private Point dir = new Point(1, 0);
        private Point food;
        private readonly Random rng = new Random();
        private bool gameOver = false;
        private bool paused = false;
        private int score = 0;

        public GameForm()
        {
            Text = "Snake - WinForms";
            ClientSize = new Size(cols * cellSize, rows * cellSize + 40);
            BackColor = Color.Black;
            DoubleBuffered = true; // smoother drawing
            KeyPreview = true;     // capture keys at form level

            StartGame();

            timer = new Timer { Interval = 120 };
            timer.Tick += (s, e) => { if (!paused && !gameOver) TickGame(); Invalidate(); };
            timer.Start();

            KeyDown += GameForm_KeyDown;
            Paint += GameForm_Paint;
        }

        private void StartGame()
        {
            snake.Clear();
            int sx = cols / 2, sy = rows / 2;
            snake.Add(new Point(sx, sy));
            snake.Add(new Point(sx - 1, sy));
            snake.Add(new Point(sx - 2, sy));
            dir = new Point(1, 0);
            score = 0;
            gameOver = false;
            paused = false;
            PlaceFood();
        }

        private void PlaceFood()
        {
            while (true)
            {
                var p = new Point(rng.Next(cols), rng.Next(rows));
                if (!snake.Contains(p)) { food = p; break; }
            }
        }

        private void TickGame()
        {
            var head = snake[0];
            var next = new Point(head.X + dir.X, head.Y + dir.Y);

            // Wrap at borders (feel free to switch to "game over at wall" by deleting this wrap logic)
            if (next.X < 0) next.X = cols - 1;
            if (next.X >= cols) next.X = 0;
            if (next.Y < 0) next.Y = rows - 1;
            if (next.Y >= rows) next.Y = 0;

            // Collision with self
            if (snake.Contains(next))
            {
                gameOver = true;
                timer.Stop();
                return;
            }

            // Move
            snake.Insert(0, next);
            if (next == food)
            {
                score += 10;
                PlaceFood();
            }
            else
            {
                snake.RemoveAt(snake.Count - 1);
            }
        }

        private void GameForm_KeyDown(object sender, KeyEventArgs e)
        {
            if (gameOver && e.KeyCode == Keys.R) { StartGame(); timer.Start(); return; }
            if (e.KeyCode == Keys.Space) { paused = !paused; return; }

            // Prevent 180-degree turns
            switch (e.KeyCode)
            {
                case Keys.Up:
                case Keys.W:
                    if (dir.Y != 1) dir = new Point(0, -1);
                    break;
                case Keys.Down:
                case Keys.S:
                    if (dir.Y != -1) dir = new Point(0, 1);
                    break;
                case Keys.Left:
                case Keys.A:
                    if (dir.X != 1) dir = new Point(-1, 0);
                    break;
                case Keys.Right:
                case Keys.D:
                    if (dir.X != -1) dir = new Point(1, 0);
                    break;
                case Keys.Add:      // Numpad + : speed up
                    timer.Interval = Math.Max(40, timer.Interval - 10);
                    break;
                case Keys.Subtract: // Numpad - : slow down
                    timer.Interval = Math.Min(300, timer.Interval + 10);
                    break;
            }
        }

        private void GameForm_Paint(object sender, PaintEventArgs e)
        {
            var g = e.Graphics;
            g.Clear(Color.Black);

            // Optional faint grid
            using (var gridPen = new Pen(Color.FromArgb(30, Color.White)))
            {
                for (int x = 0; x <= cols; x++) g.DrawLine(gridPen, x * cellSize, 0, x * cellSize, rows * cellSize);
                for (int y = 0; y <= rows; y++) g.DrawLine(gridPen, 0, y * cellSize, cols * cellSize, y * cellSize);
            }

            // Food
            using (var br = new SolidBrush(Color.Red))
            {
                g.FillEllipse(br, food.X * cellSize + 2, food.Y * cellSize + 2, cellSize - 4, cellSize - 4);
            }

            // Snake
            for (int i = 0; i < snake.Count; i++)
            {
                var p = snake[i];
                var rect = new Rectangle(p.X * cellSize + 1, p.Y * cellSize + 1, cellSize - 2, cellSize - 2);
                using (var br = new SolidBrush(i == 0 ? Color.Lime : Color.Green))
                    g.FillRectangle(br, rect);
            }

            // HUD
            var hudRect = new Rectangle(0, rows * cellSize, cols * cellSize, 40);
            using (var hudBrush = new SolidBrush(Color.FromArgb(24, 24, 24)))
                g.FillRectangle(hudBrush, hudRect);

            string hud = $"Score: {score}   Speed: {Math.Round(1000.0 / timer.Interval, 1)} steps/s   [Arrows/WASD] Move  [Space] Pause  [R] Restart  [+/-] Speed";
            using (var font = new Font(FontFamily.GenericSansSerif, 10, FontStyle.Bold))
            using (var br = new SolidBrush(Color.White))
                g.DrawString(hud, font, br, new PointF(8, rows * cellSize + 10));

            if (paused) DrawCenterText(g, "PAUSED - press Space", 18, Color.WhiteSmoke);
            if (gameOver) DrawCenterText(g, $"GAME OVER\nScore: {score}\nPress R to Restart", 20, Color.OrangeRed);
        }

        private void DrawCenterText(Graphics g, string text, float size, Color color)
        {
            using (var fmt = new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center })
            using (var font = new Font(FontFamily.GenericSansSerif, size, FontStyle.Bold))
            using (var br = new SolidBrush(color))
            {
                var rect = new Rectangle(0, 0, cols * cellSize, rows * cellSize);
                g.DrawString(text, font, br, rect, fmt);
            }
        }
    }
}
